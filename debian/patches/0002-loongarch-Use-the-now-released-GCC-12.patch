From 1674debbc4deee3389da03dfad77821c1fc3b490 Mon Sep 17 00:00:00 2001
From: Bruno Haible <bruno@clisp.org>
Date: Mon, 9 May 2022 03:42:21 +0200
Subject: [PATCH 2/4] loongarch: Use the now-released GCC 12.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* cross-tools/cross-build.sh: Fix typo in comment.
(func_build_zstd): New function.
(func_build_gcc): For GCC versions ≥ 12, build also zstd.
* cross-tools/patches/gcc-12.1.0.patch: New file.
* cross-tools/cross.conf (loongarch64): Use GCC 12.1.0.
* avcall/Makefile.devel (avcall-loongarch64-linux.s): Force the use of
GCC 12.1.0.
* vacall/Makefile.devel (vacall-loongarch64-linux.s): Likewise.
* callback/vacall_r/Makefile.devel (vacall-loongarch64-linux.s):
Likewise.
* trampoline/Makefile.devel (proto-loongarch64.s): Likewise.
* callback/trampoline_r/Makefile.devel (proto-loongarch64.s): Likewise.
* trampoline/proto-loongarch64.s: Regenerated.
* callback/trampoline_r/proto-loongarch64.s: Regenerated.
---
 ChangeLog                                 | 38 ++++++++++++++++++
 avcall/Makefile.devel                     |  2 +-
 callback/trampoline_r/Makefile.devel      |  2 +-
 callback/trampoline_r/proto-loongarch64.s | 10 ++++-
 callback/vacall_r/Makefile.devel          |  2 +-
 cross-tools/patches/gcc-12.1.0.patch      | 31 +++++++++++++++
 trampoline/Makefile.devel                 |  2 +-
 trampoline/proto-loongarch64.s            | 48 +++++++++++------------
 vacall/Makefile.devel                     |  2 +-
 9 files changed, 106 insertions(+), 31 deletions(-)
 create mode 100644 cross-tools/patches/gcc-12.1.0.patch

diff --git a/ChangeLog b/ChangeLog
index f932b24..98f1c0c 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,41 @@
+2022-05-08  Bruno Haible  <bruno@clisp.org>
+
+	loongarch: Use the now-released GCC 12.
+	* cross-tools/cross-build.sh: Fix typo in comment.
+	(func_build_zstd): New function.
+	(func_build_gcc): For GCC versions ≥ 12, build also zstd.
+	* cross-tools/patches/gcc-12.1.0.patch: New file.
+	* cross-tools/cross.conf (loongarch64): Use GCC 12.1.0.
+	* avcall/Makefile.devel (avcall-loongarch64-linux.s): Force the use of
+	GCC 12.1.0.
+	* vacall/Makefile.devel (vacall-loongarch64-linux.s): Likewise.
+	* callback/vacall_r/Makefile.devel (vacall-loongarch64-linux.s):
+	Likewise.
+	* trampoline/Makefile.devel (proto-loongarch64.s): Likewise.
+	* callback/trampoline_r/Makefile.devel (proto-loongarch64.s): Likewise.
+	* trampoline/proto-loongarch64.s: Regenerated.
+	* callback/trampoline_r/proto-loongarch64.s: Regenerated.
+
+2022-05-08  Bruno Haible  <bruno@clisp.org>
+
+	riscv32: Add support for Linux/riscv32 with PIE-enabled GCC.
+	* vacall/Makefile.devel (vacall-riscv32-ilp32d-linux-pic.s): New target.
+	(vacall-riscv32-ilp32d-macro.S): Include code for the PIC and the
+	non-PIC case.
+	* vacall/Makefile.in (SOURCE_FILES): Add
+	vacall-riscv32-ilp32d-linux-pic.s.
+
+2022-05-08  Bruno Haible  <bruno@clisp.org>
+
+	riscv64: Add support for Linux/riscv64 with PIE-enabled GCC.
+	Reported by Raymond Wong <infiwang@pm.me> at
+	<https://savannah.gnu.org/bugs/?62422>.
+	* vacall/Makefile.devel (vacall-riscv64-lp64d-linux-pic.s): New target.
+	(vacall-riscv64-lp64d-macro.S): Include code for the PIC and the non-PIC
+	case.
+	* vacall/Makefile.in (SOURCE_FILES): Add
+	vacall-riscv64-lp64d-linux-pic.s.
+
 2022-02-12  Bruno Haible  <bruno@clisp.org>
 
 	loongarch: Fix gcc installation.
diff --git a/avcall/Makefile.devel b/avcall/Makefile.devel
index 2933060..ab020b8 100644
--- a/avcall/Makefile.devel
+++ b/avcall/Makefile.devel
@@ -244,7 +244,7 @@ avcall-riscv64-lp64d-macro.S : avcall-riscv64-lp64d-linux.s ../common/asm-riscv.
 
 
 avcall-loongarch64-linux.s : avcall-loongarch64.c avcall-internal.h avcall.h avcall-alist.h $(THISFILE)
-	$(CROSS_TOOL) loongarch64-linux gcc $(GCCFLAGS) -D__loongarch64__ -S avcall-loongarch64.c -o avcall-loongarch64-linux.s
+	$(CROSS_TOOL) loongarch64-linux gcc-12.1.0 $(GCCFLAGS) -D__loongarch64__ -S avcall-loongarch64.c -o avcall-loongarch64-linux.s
 
 avcall-loongarch64-macro.S : avcall-loongarch64-linux.s ../common/asm-loongarch.sh ../common/noexecstack.h $(THISFILE)
 	(../common/asm-loongarch.sh < avcall-loongarch64-linux.s ; cat ../common/noexecstack.h) > avcall-loongarch64-macro.S
diff --git a/callback/trampoline_r/Makefile.devel b/callback/trampoline_r/Makefile.devel
index a5c7e83..95e4a01 100644
--- a/callback/trampoline_r/Makefile.devel
+++ b/callback/trampoline_r/Makefile.devel
@@ -154,7 +154,7 @@ proto-riscv64.s : proto64.c
 	$(CROSS_TOOL) riscv64-linux gcc-7.3.0 $(OLDGCCFLAGS) -D__riscv64__ -S proto64.c -o $@
 
 proto-loongarch64.s : proto64.c
-	$(CROSS_TOOL) loongarch64-linux gcc $(OLDGCCFLAGS) -D__loongarch64__ -S proto64.c -o $@
+	$(CROSS_TOOL) loongarch64-linux gcc-12.1.0 $(OLDGCCFLAGS) -D__loongarch64__ -S proto64.c -o $@
 
 tramp-i386.o : tramp-i386.s
 	$(ASPREFIX)/i486-linux/bin/as tramp-i386.s -o $@
diff --git a/callback/trampoline_r/proto-loongarch64.s b/callback/trampoline_r/proto-loongarch64.s
index decf82e..97fa754 100644
--- a/callback/trampoline_r/proto-loongarch64.s
+++ b/callback/trampoline_r/proto-loongarch64.s
@@ -4,6 +4,8 @@
 	.globl	tramp
 	.type	tramp, @function
 tramp:
+.LFB0 = .
+	.cfi_startproc
 	lu12i.w	$r20,1130504192>>12			# 0x43622000
 	lu12i.w	$r12,-559878144>>12			# 0xffffffffdea0f000
 	ori	$r20,$r20,341
@@ -13,17 +15,23 @@ tramp:
 	lu52i.d	$r20,$r20,0x7350000000000000>>52
 	lu52i.d	$r12,$r12,0xbab0000000000000>>52
 	jr	$r12
+	.cfi_endproc
+.LFE0:
 	.size	tramp, .-tramp
 	.section	.text.unlikely,"ax",@progbits
 	.align	2
 	.globl	jump
 	.type	jump, @function
 jump:
+.LFB1 = .
+	.cfi_startproc
 	lu12i.w	$r12,-559878144>>12			# 0xffffffffdea0f000
 	ori	$r12,$r12,4011
 	lu32i.d	$r12,0xfffebec000000000>>32
 	lu52i.d	$r12,$r12,0xbab0000000000000>>52
 	jr	$r12
+	.cfi_endproc
+.LFE1:
 	.size	jump, .-jump
-	.ident	"GCC: (GNU) 12.0.0 20211224 (experimental)"
+	.ident	"GCC: (GNU) 12.1.0"
 	.section	.note.GNU-stack,"",@progbits
diff --git a/callback/vacall_r/Makefile.devel b/callback/vacall_r/Makefile.devel
index 5eb626c..4cfae4c 100644
--- a/callback/vacall_r/Makefile.devel
+++ b/callback/vacall_r/Makefile.devel
@@ -237,7 +237,7 @@ vacall-riscv64-lp64d-macro.S : vacall-riscv64-lp64d-linux.s ../../common/asm-ris
 
 
 vacall-loongarch64-linux.s : ../../vacall/vacall-loongarch64.c ../../vacall/vacall-internal.h vacall_r.h $(THISFILE)
-	$(CROSS_TOOL) loongarch64-linux gcc $(GCCFLAGS) -D__loongarch64__ -S ../../vacall/vacall-loongarch64.c -I../../vacall -I. -o vacall-loongarch64-linux.s
+	$(CROSS_TOOL) loongarch64-linux gcc-12.1.0 $(GCCFLAGS) -D__loongarch64__ -S ../../vacall/vacall-loongarch64.c -I../../vacall -I. -o vacall-loongarch64-linux.s
 
 vacall-loongarch64-macro.S : vacall-loongarch64-linux.s ../../common/asm-loongarch.sh ../../common/noexecstack.h $(THISFILE)
 	(../../common/asm-loongarch.sh < vacall-loongarch64-linux.s ; cat ../../common/noexecstack.h) > vacall-loongarch64-macro.S
diff --git a/cross-tools/patches/gcc-12.1.0.patch b/cross-tools/patches/gcc-12.1.0.patch
new file mode 100644
index 0000000..0895d30
--- /dev/null
+++ b/cross-tools/patches/gcc-12.1.0.patch
@@ -0,0 +1,31 @@
+--- gcc-12.1.0.bak/config.guess	2022-05-06 09:30:56.000000000 +0200
++++ gcc-12.1.0/config.guess	2022-05-08 19:31:19.836425784 +0200
+@@ -1109,16 +1109,24 @@
+ 	exit ;;
+     x86_64:Linux:*:*)
+ 	set_cc_for_build
++	CPU=$UNAME_MACHINE
+ 	LIBCABI=$LIBC
+ 	if test "$CC_FOR_BUILD" != no_compiler_found; then
+-	    if (echo '#ifdef __ILP32__'; echo IS_X32; echo '#endif') | \
++	    if (echo '#ifdef __i386__'; echo IS_X86; echo '#endif') | \
+ 		(CCOPTS="" $CC_FOR_BUILD -E - 2>/dev/null) | \
+-		grep IS_X32 >/dev/null
++		grep IS_X86 >/dev/null
+ 	    then
+-		LIBCABI="$LIBC"x32
++		CPU=i686
++	    else
++		if (echo '#ifdef __ILP32__'; echo IS_X32; echo '#endif') | \
++		    (CCOPTS="" $CC_FOR_BUILD -E - 2>/dev/null) | \
++		    grep IS_X32 >/dev/null
++		then
++		    LIBCABI=${LIBC}x32
++		fi
+ 	    fi
+ 	fi
+-	echo "$UNAME_MACHINE"-pc-linux-"$LIBCABI"
++	echo "$CPU"-pc-linux-"$LIBCABI"
+ 	exit ;;
+     xtensa*:Linux:*:*)
+ 	echo "$UNAME_MACHINE"-unknown-linux-"$LIBC"
diff --git a/trampoline/Makefile.devel b/trampoline/Makefile.devel
index bc3c6ff..54ea1be 100644
--- a/trampoline/Makefile.devel
+++ b/trampoline/Makefile.devel
@@ -154,7 +154,7 @@ proto-riscv64.s : proto64.c
 	$(CROSS_TOOL) riscv64-linux gcc-7.3.0 $(OLDGCCFLAGS) -D__riscv64__ -S proto64.c -o $@
 
 proto-loongarch64.s : proto64.c
-	$(CROSS_TOOL) loongarch64-linux gcc $(OLDGCCFLAGS) -D__loongarch64__ -S proto64.c -o $@
+	$(CROSS_TOOL) loongarch64-linux gcc-12.1.0 $(OLDGCCFLAGS) -D__loongarch64__ -S proto64.c -o $@
 
 tramp-i386.o : tramp-i386.s
 	$(ASPREFIX)/i486-linux/bin/as tramp-i386.s -o $@
diff --git a/trampoline/proto-loongarch64.s b/trampoline/proto-loongarch64.s
index 2446569..721d2fb 100644
--- a/trampoline/proto-loongarch64.s
+++ b/trampoline/proto-loongarch64.s
@@ -4,41 +4,39 @@
 	.globl	tramp
 	.type	tramp, @function
 tramp:
-	lu12i.w	$r12,324501504>>12			# 0x13578000
-	ori	$r12,$r12,1893
-	lu32i.d	$r12,0x4567800000000>>32
-	lu52i.d	$r12,$r12,0x1230000000000000>>52
-	addi.w	$r15,$r0,33			# 0x21
-	st.b	$r15,$r12,1
-	addi.w	$r15,$r0,98			# 0x62
-	lu12i.w	$r13,-559878144>>12			# 0xffffffffdea0f000
-	st.b	$r15,$r12,2
-	addi.w	$r15,$r0,67			# 0x43
-	addi.w	$r14,$r0,85			# 0x55
-	ori	$r13,$r13,4011
-	st.b	$r15,$r12,3
-	addi.w	$r15,$r0,17			# 0x11
-	lu32i.d	$r13,0xfffebec000000000>>32
-	st.b	$r14,$r12,0
-	st.b	$r15,$r12,4
-	st.b	$r14,$r12,6
-	addi.w	$r15,$r0,71			# 0x47
-	addi.w	$r14,$r0,115			# 0x73
-	st.b	$r15,$r12,5
-	st.b	$r14,$r12,7
-	lu52i.d	$r13,$r13,0xbab0000000000000>>52
-	jr	$r13
+.LFB0 = .
+	.cfi_startproc
+	lu12i.w	$r13,324501504>>12			# 0x13578000
+	lu12i.w	$r14,1130504192>>12			# 0x43622000
+	ori	$r13,$r13,1893
+	ori	$r14,$r14,341
+	lu12i.w	$r12,-559878144>>12			# 0xffffffffdea0f000
+	lu32i.d	$r13,0x4567800000000>>32
+	lu32i.d	$r14,0x5471100000000>>32
+	ori	$r12,$r12,4011
+	lu52i.d	$r13,$r13,0x1230000000000000>>52
+	lu52i.d	$r14,$r14,0x7350000000000000>>52
+	lu32i.d	$r12,0xfffebec000000000>>32
+	stptr.d	$r14,$r13,0
+	lu52i.d	$r12,$r12,0xbab0000000000000>>52
+	jr	$r12
+	.cfi_endproc
+.LFE0:
 	.size	tramp, .-tramp
 	.section	.text.unlikely,"ax",@progbits
 	.align	2
 	.globl	jump
 	.type	jump, @function
 jump:
+.LFB1 = .
+	.cfi_startproc
 	lu12i.w	$r12,-559878144>>12			# 0xffffffffdea0f000
 	ori	$r12,$r12,4011
 	lu32i.d	$r12,0xfffebec000000000>>32
 	lu52i.d	$r12,$r12,0xbab0000000000000>>52
 	jr	$r12
+	.cfi_endproc
+.LFE1:
 	.size	jump, .-jump
-	.ident	"GCC: (GNU) 12.0.0 20211224 (experimental)"
+	.ident	"GCC: (GNU) 12.1.0"
 	.section	.note.GNU-stack,"",@progbits
diff --git a/vacall/Makefile.devel b/vacall/Makefile.devel
index 7e41aad..f3cf444 100644
--- a/vacall/Makefile.devel
+++ b/vacall/Makefile.devel
@@ -280,7 +280,7 @@ vacall-riscv64-lp64d-macro.S : vacall-riscv64-lp64d-linux.s ../common/asm-riscv.
 
 
 vacall-loongarch64-linux.s : vacall-loongarch64.c vacall-internal.h vacall.h $(THISFILE)
-	$(CROSS_TOOL) loongarch64-linux gcc $(GCCFLAGS) -D__loongarch64__ -S vacall-loongarch64.c -o vacall-loongarch64-linux.s
+	$(CROSS_TOOL) loongarch64-linux gcc-12.1.0 $(GCCFLAGS) -D__loongarch64__ -S vacall-loongarch64.c -o vacall-loongarch64-linux.s
 
 vacall-loongarch64-macro.S : vacall-loongarch64-linux.s ../common/asm-loongarch.sh ../common/noexecstack.h $(THISFILE)
 	(../common/asm-loongarch.sh < vacall-loongarch64-linux.s ; cat ../common/noexecstack.h) > vacall-loongarch64-macro.S
-- 
2.46.0

